// <auto-generated />
using System;
using ContactCenter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContactCenter.Data.Migrations
{
    [DbContext(typeof(EDRSMContext))]
    [Migration("20240807063907_IncidentReportsTablesInit")]
    partial class IncidentReportsTablesInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContactCenter.Data.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName(" AccountType");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("Balance ");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("InvoiceNumber ");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ContactCenter.Data.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Agent", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.AgentSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgentId" }, "IX_AgentSession_AgentId");

                    b.ToTable("AgentSession", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Call", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CallerId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactId")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("NotesJson")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AgentId" }, "IX_Call_AgentId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Call_CategoryId");

                    b.HasIndex(new[] { "ContactId" }, "IX_Call_ContactId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Call_LocationId");

                    b.HasIndex(new[] { "TicketId" }, "IX_Call_TicketId");

                    b.ToTable("Call", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.CallCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_CallCategory_CreatorId");

                    b.HasIndex(new[] { "ParentId" }, "IX_CallCategory_ParentId");

                    b.ToTable("CallCategory", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_Contact_CreatorId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Contact_LocationId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Councillor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Councillor", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.EdrsmUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying");

                    b.Property<bool>("AgreedToTerms")
                        .HasColumnType("boolean");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<int>("CountryOfOriginId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAdmin ");

                    b.Property<string>("MunicipalityAccountNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("MunicipalityAccountNumber ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("PreferredContactMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("Username ");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("EDrsmUser", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.EmailConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("boolean");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("SenderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_EmailConfig_CreatorId");

                    b.ToTable("EmailConfig", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("Category ");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faq", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("IdentificationDocument")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("IdentificationType", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Incident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("HeadingName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("IncidentHeadingId")
                        .HasColumnType("integer");

                    b.Property<int>("IncidentTypeId")
                        .HasMaxLength(128)
                        .HasColumnType("integer");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("LocationCoordinates")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex(new[] { "IncidentHeadingId" }, "IX_Incident_IncidentHeadingId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Incident_StatusId");

                    b.ToTable("Incident", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DetailedDescription")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("IncidentId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortSummary")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("StatusChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IncidentId" }, "IX_IncidentAudit_IncidentId");

                    b.HasIndex(new[] { "StatusId" }, "IX_IncidentAudit_StatusId");

                    b.ToTable("IncidentAudit", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentHeading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HeadingName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("IncidentTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IncidentTypeId" }, "IX_IncidentHeading_IncidentTypeId");

                    b.ToTable("IncidentHeading", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("IncidentStatus", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("IncidentType", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("GeoLatitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GeoLongitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_Location_CreatorId");

                    b.HasIndex(new[] { "ParentId" }, "IX_Location_ParentId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.PreferredContactMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ContactMethod")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("PreferredContactMethod", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Query", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("AdminID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status ");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminId" }, "IX_Queries_AdminID");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("ContactCenter.Data.RequestedPaymentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid")
                        .HasColumnName("AdminID ");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("Amount ");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("Duration ");

                    b.Property<int>("SelectedPlan")
                        .HasColumnType("integer")
                        .HasColumnName("SelectedPlan ");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status ");

                    b.Property<string>("TermsAndConditions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TermsAndConditions ");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminId" }, "IX_RequestedPaymentPlans _AdminID ");

                    b.ToTable("RequestedPaymentPlans ", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("NotesJson")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AssigneeId" }, "IX_Ticket_AssigneeId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Ticket_CategoryId");

                    b.HasIndex(new[] { "ContactId" }, "IX_Ticket_ContactId");

                    b.HasIndex(new[] { "CreatorId" }, "IX_Ticket_CreatorId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Ticket_LocationId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.TicketCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_TicketCategory_CreatorId");

                    b.HasIndex(new[] { "ParentId" }, "IX_TicketCategory_ParentId");

                    b.ToTable("TicketCategory", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AuthRecoveryCodes")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("AuthenticatorKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LockoutExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("TwoFactorAuthEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorId" }, "IX_User_CreatorId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AuthSchemeId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientIpAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LogoutDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserSession_UserId");

                    b.ToTable("UserSession", (string)null);
                });

            modelBuilder.Entity("ContactCenter.Data.Agent", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "IdNavigation")
                        .WithOne("Agent")
                        .HasForeignKey("ContactCenter.Data.Agent", "Id")
                        .IsRequired()
                        .HasConstraintName("Agent_Id_fkey");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("ContactCenter.Data.AgentSession", b =>
                {
                    b.HasOne("ContactCenter.Data.Agent", "Agent")
                        .WithMany("AgentSessions")
                        .HasForeignKey("AgentId")
                        .IsRequired()
                        .HasConstraintName("AgentSession_AgentId_fkey");

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("ContactCenter.Data.Call", b =>
                {
                    b.HasOne("ContactCenter.Data.Agent", "Agent")
                        .WithMany("Calls")
                        .HasForeignKey("AgentId")
                        .IsRequired()
                        .HasConstraintName("Call_AgentId_fkey");

                    b.HasOne("ContactCenter.Data.CallCategory", "Category")
                        .WithMany("Calls")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Call_CategoryId_fkey");

                    b.HasOne("ContactCenter.Data.Contact", "Contact")
                        .WithMany("Calls")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("Call_ContactId_fkey");

                    b.HasOne("ContactCenter.Data.Location", "Location")
                        .WithMany("Calls")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("Call_LocationId_fkey");

                    b.HasOne("ContactCenter.Data.Ticket", "Ticket")
                        .WithMany("Calls")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("Call_ConversationId_fkey");

                    b.Navigation("Agent");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("Location");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ContactCenter.Data.CallCategory", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("CallCategories")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("CallCategory_CreatorId_fkey");

                    b.HasOne("ContactCenter.Data.CallCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("CallCategory_ParentId_fkey");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ContactCenter.Data.Contact", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("Contacts")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("Contact_CreatorId_fkey");

                    b.HasOne("ContactCenter.Data.Location", "Location")
                        .WithMany("Contacts")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("Contact_LocationId_fkey");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ContactCenter.Data.EmailConfig", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("EmailConfigs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EmailConfig_User");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ContactCenter.Data.Incident", b =>
                {
                    b.HasOne("ContactCenter.Data.Admin", null)
                        .WithMany("Incidents")
                        .HasForeignKey("AdminId");

                    b.HasOne("ContactCenter.Data.IncidentHeading", "IncidentHeading")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentHeadingId")
                        .IsRequired()
                        .HasConstraintName("Incident_IncidentHeadingId_fkey");

                    b.HasOne("ContactCenter.Data.IncidentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncidentHeading");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentAudit", b =>
                {
                    b.HasOne("ContactCenter.Data.Incident", "Incident")
                        .WithMany("IncidentAudits")
                        .HasForeignKey("IncidentId")
                        .IsRequired()
                        .HasConstraintName("IncidentAudit_IncidentId_fkey");

                    b.HasOne("ContactCenter.Data.IncidentStatus", "Status")
                        .WithMany("IncidentAudits")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("IncidentAudit_StatusId_fkey");

                    b.Navigation("Incident");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentHeading", b =>
                {
                    b.HasOne("ContactCenter.Data.IncidentType", "IncidentType")
                        .WithMany("IncidentHeadings")
                        .HasForeignKey("IncidentTypeId")
                        .IsRequired()
                        .HasConstraintName("IncidentHeading_IncidentTypeId_fkey");

                    b.Navigation("IncidentType");
                });

            modelBuilder.Entity("ContactCenter.Data.Location", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("Locations")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("Location_CreatorId_fkey");

                    b.HasOne("ContactCenter.Data.Location", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("Location_ParentId_fkey");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ContactCenter.Data.Query", b =>
                {
                    b.HasOne("ContactCenter.Data.Admin", "Admin")
                        .WithMany("Queries")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("Queries_AdminID_fkey");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ContactCenter.Data.RequestedPaymentPlan", b =>
                {
                    b.HasOne("ContactCenter.Data.Admin", "Admin")
                        .WithMany("RequestedPaymentPlans")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("RequestedPaymentPlans _AdminID _fkey");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ContactCenter.Data.Ticket", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Assignee")
                        .WithMany("Tickets")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("Ticket_AssigneeId_fkey");

                    b.HasOne("ContactCenter.Data.TicketCategory", "Category")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Ticket_CategoryId_fkey");

                    b.HasOne("ContactCenter.Data.Contact", "Contact")
                        .WithMany("Tickets")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("Ticket_ContactId_fkey");

                    b.HasOne("ContactCenter.Data.Agent", "Creator")
                        .WithMany("Tickets")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("Ticket_CreatorId_fkey");

                    b.HasOne("ContactCenter.Data.Location", "Location")
                        .WithMany("Tickets")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("Ticket_LocationId_fkey");

                    b.Navigation("Assignee");

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("Creator");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ContactCenter.Data.TicketCategory", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("TicketCategories")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("TicketCategory_CreatorId_fkey");

                    b.HasOne("ContactCenter.Data.TicketCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("TicketCategory_ParentId_fkey");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ContactCenter.Data.User", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "Creator")
                        .WithMany("InverseCreator")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("User_CreatorId_fkey");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ContactCenter.Data.UserSession", b =>
                {
                    b.HasOne("ContactCenter.Data.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("UserSession_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ContactCenter.Data.Admin", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("Queries");

                    b.Navigation("RequestedPaymentPlans");
                });

            modelBuilder.Entity("ContactCenter.Data.Agent", b =>
                {
                    b.Navigation("AgentSessions");

                    b.Navigation("Calls");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ContactCenter.Data.CallCategory", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("ContactCenter.Data.Contact", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ContactCenter.Data.Incident", b =>
                {
                    b.Navigation("IncidentAudits");
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentHeading", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentStatus", b =>
                {
                    b.Navigation("IncidentAudits");
                });

            modelBuilder.Entity("ContactCenter.Data.IncidentType", b =>
                {
                    b.Navigation("IncidentHeadings");
                });

            modelBuilder.Entity("ContactCenter.Data.Location", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Contacts");

                    b.Navigation("InverseParent");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ContactCenter.Data.Ticket", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("ContactCenter.Data.TicketCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("ContactCenter.Data.User", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("CallCategories");

                    b.Navigation("Contacts");

                    b.Navigation("EmailConfigs");

                    b.Navigation("InverseCreator");

                    b.Navigation("Locations");

                    b.Navigation("TicketCategories");

                    b.Navigation("Tickets");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
